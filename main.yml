---
- hosts: localhost

  vars:
    the_user: "{{ ansible_user_id }}"

  roles:
    - role: geerlingguy.docker
      become: yes
    - role: fubarhouse.golang
      vars:
        go_version: 1.16.4
      become: yes

  pre_tasks:

    - name: Add Apt-Keys
      apt_key:
        keyserver: "{{ item.key }}"
        id: "{{ item.value }}"
      become: yes
      loop: "{{ tag_data | dict2items }}"
      vars:
        tag_data:
          # Github CLI
          keyserver.ubuntu.com: C99B11DEB97541F0
          # example.keyserver: key.id

    - name: Add Apt-Keys from URL
      apt_key:
        # Terraform
        url: https://apt.releases.hashicorp.com/gpg
        state: present
      become: yes


    - name: Add Apt-Repositories
      apt_repository:
        repo: "{{ item }}"
        state: present
      become: yes
      loop:
        # Github CLI
        - deb https://cli.github.com/packages focal main
        # Terraform
        - deb [arch=amd64] https://apt.releases.hashicorp.com focal main

    - name: Update apt cache if needed.
      apt: update_cache=yes cache_valid_time=3600
      become: yes

  # handlers:
  #   - name: restart apache
  #     service: name=apache2 state=restarted

  tasks:
    - name: Install packages
      apt:
        name:
          # req for NAS connection
          - nfs-common
          # req for the 'add-apt-repository' command needed for ghcli repo if on desktop linux
          - software-properties-common
          # needed for terraform
          - gnupg
          - curl
          - vim
          - zsh
          - gh
          - git
          - python3-pip
          - python3
          - unzip
          - terraform
        state: present
      become: yes

    - name: Set up git username
      community.general.git_config:
        name: user.name
        value: "imkumpy"
        scope: global

    - name: Set up git email
      community.general.git_config:
        name: user.email
        value: "lebergarrett@gmail.com"
        scope: global

    - name: Ensure downloads dir exists
      file:
        path: ~/Downloads
        state: directory

    - name: Check if awscli exists
      stat:
        path: /usr/local/bin/aws
        #path: ~/Downloads/aws
      register: awscli_dir

    - name: Download awscli zip
      get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: ~/Downloads/awscliv2.zip
      when: awscli_dir.stat.exists == False

    - name: Unzip awscli zip
      unarchive:
        src: ~/Downloads/awscliv2.zip
        dest: ~/Downloads/
        remote_src: yes
        creates: /usr/local/bin/aws
        #creates: ~/Downloads/aws

    - name: Run awscli install script
      command: ./aws/install
      args:
        chdir: /home/{{ the_user }}/Downloads
        creates: /usr/local/bin/aws
      become: yes

    - name: Check if Oh My Zsh! exists
      stat:
        path: ~/.oh-my-zsh
      register: ohmyzsh_dir

    - name: Download Oh My Zsh! install script
      get_url:
        url: https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        dest: ~/Downloads/ohmyzsh-install.sh
      when: ohmyzsh_dir.stat.exists == False

    - name: Make install script executable
      file:
        path: ~/Downloads/ohmyzsh-install.sh
        mode: 0744 

    - name: Run Oh My Zsh! install script
      command: ./ohmyzsh-install.sh
      args:
        chdir: ~/Downloads
        creates: ~/.oh-my-zsh

    - name: change user shell to zsh 
      become: yes
      user:
        name: "{{ the_user }}"
        shell: /bin/zsh

    - name: Create mount pount for shared drive
      file:
        path: /media/shared
        state: directory
      become: yes

    - name: Mount /media/shared drive
      mount:
        path: /media/shared
        src: 192.168.1.114:mnt/Shared/ShareDataSet
        fstype: nfs
        opts: defaults
        state: present
      become: yes

    - name: Mount all drives
      command: mount -a
      become: yes

        # TODO
        # Copy over config files using github repo
